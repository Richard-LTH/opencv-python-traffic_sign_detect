import numpy as np
import os
from PIL import Image
import cv2
w,h=64,64
path= 'C:/Users/19543/Desktop/shibie/img/select_sign/'#5000DUO
d = os.listdir(path)  # 文件夹所有图片文件名
X = np.zeros((len(d), w, h, 3))  # 预定义输入数据w,h=64
Y = np.zeros(len(d))  # 预定义输出数据

for i in range(len(d)):
    imgfile=d[i]
    img=cv2.imread(path+d[i])
    img=cv2.resize(img,(w,h))
    images=img/255#如果需要归一化
    label=int(imgfile[0:3])
    X[i,:,:,:]=images
    Y[i]=label


from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2,
                                                    random_state=4)

from tensorflow.keras import layers, models

model = models.Sequential()
# 第一个卷积层，卷积神经元个数为32，卷积核大小为3×，默认可省
model.add(layers.Conv2D(32, (3, 3), strides=(1, 1), activation='relu',input_shape=(64, 64, 3)))
# 紧接着的第一个池化层，2×2池化，步长为2，默认可缺省
model.add(layers.MaxPooling2D((2, 2), strides=2))
# 第二个卷积层
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
# 第二个池化层
model.add(layers.MaxPooling2D((2, 2)))
# 第三个卷积层
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
# 展平
model.add(layers.Flatten())
# 全连接层
model.add(layers.Dense(128, activation='relu'))
# 输出层
model.add(layers.Dense(58, activation='softmax'))#58类

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.summary()
model.fit(x_train, y_train, epochs=10)  # 500
#模型训练结束，保存模型
#model.save('mymodel_cnn58.h5')
model.evaluate(x_test, y_test, verbose=2)
#以下是
yy = model.predict(x_test)  # 获得预测结果概率矩阵
y1 = np.argmax(yy, axis=1)  # 获得最终预测结果，取概率最大的类标签
r = y1 - y_test  # 预测结果与实际结果相减
rv = len(r[r == 0]) / len(r)  # 计算预测准确率
print('预测准确率： ', rv)
